import re
import disnake
from disnake.colour import Colour
from disnake import Embed, User

from .database.methods import makers as maker_methods, publications as publication_methods


async def get_level_title(levelnum: int) -> str:
    levelnum = int(levelnum)
    if levelnum == 1:
        level = "–†–µ–¥–∞–∫—Ç–æ—Ä"
    elif levelnum == 2:
        level = "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"
    elif levelnum == 3:
        level = "–ì–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"
    elif levelnum == 4:
        level = "–ö—É—Ä–∞—Ç–æ—Ä"
    elif levelnum == -1:
        level = "–•—Ä–∞–Ω–∏—Ç–µ–ª—å"
    else:
        level = "`–û—à–∏–±–∫–∞`"
    return level


async def get_status_title(status_kw: str) -> str:
    if status_kw == "new":
        status = "–ù–∞ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–º —Å—Ä–æ–∫–µ"
    elif status_kw == "active":
        status = "–ê–∫—Ç–∏–≤–µ–Ω"
    elif status_kw == "inactive":
        status = "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    elif status_kw == "in_process":
        status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    elif status_kw == "completed":
        status = "–°–¥–µ–ª–∞–Ω"
    elif status_kw == "failed":
        status = "–ü—Ä–æ–≤–∞–ª–µ–Ω"
    else:
        status = "`–û—à–∏–±–∫–∞`"
    return status


async def get_color_object(color_hex: str) -> Colour:
    color = Colour(int(color_hex, base=16))
    return color


async def get_maker_profile(user: User) -> Embed:
    maker = await maker_methods.get_maker(discord_id=user.id)

    level = await get_level_title(maker.level)
    status = await get_status_title(maker.status)
    publications_amount = await maker_methods.get_publications_by_maker(id=maker.id)
    if not publications_amount:
        publications_amount = 0
    else:
        publications_amount = len(publications_amount)

    embed_description = f"""
    **ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{maker.id}`**
    **Discord: <@{maker.discord_id}>**
    **–ù–∏–∫–Ω–µ–π–º: {maker.nickname}**
    **–î–æ–ª–∂–Ω–æ—Å—Ç—å: {level}**
    **–°—Ç–∞—Ç—É—Å: {status}**

    **–°–¥–µ–ª–∞–Ω–æ –≤—ã–ø—É—Å–∫–æ–≤: {publications_amount}**
    **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {maker.warns}**
    """

    embed = Embed(
        title=f"–ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ {user.display_name}",
        color=0x2B2D31,
        description=embed_description,
        timestamp=maker.appointment_datetime,
    )

    if not maker.account_status:
        embed.set_author(name="üî¥ –ê–ö–ö–ê–£–ù–¢ –î–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù üî¥")

    embed.set_thumbnail(user.display_avatar.url)
    embed.set_footer(text="–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")

    return embed


async def get_publication_profile(publication_id: int) -> Embed:
    publication = await publication_methods.get_publication(publication_id=publication_id)
    maker = await maker_methods.get_maker_by_id(id=publication.maker_id)
    if not maker:
        maker = "`–Ω–µ —É–∫–∞–∑–∞–Ω`"
    else:
        maker = f"<@{maker.discord_id}> `{maker.nickname}`"

    information_creator = await maker_methods.get_maker_by_id(id=publication.information_creator_id)
    if not information_creator:
        information_creator = "`–Ω–µ —É–∫–∞–∑–∞–Ω`"
    else:
        information_creator = (
            f"<@{information_creator.discord_id}> `{information_creator.nickname}`"
        )

    dp_paid_by = await maker_methods.get_maker_by_id(id=publication.salary_payer_id)
    if not dp_paid_by:
        dp_paid_by = "`–Ω–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ`"
    else:
        dp_paid_by = f"<@{dp_paid_by.discord_id}> `{dp_paid_by.nickname}`"

    if not publication.date:
        date = "`–Ω–µ —É–∫–∞–∑–∞–Ω–∞`"
    else:
        date = publication.date.strftime("%d.%m.%Y")

    if not publication.amount_dp:
        amount_dp = "`–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`"
    else:
        amount_dp = f"{publication.amount_dp} DP"

    status = await get_status_title(status_kw=publication.status)

    embed_description = f"""
    **–ù–æ–º–µ—Ä –≤—ã–ø—É—Å–∫–∞: `{publication.publication_number}`**
    **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–ø—É—Å–∫–∞: {date}**
    **–†–µ–¥–∞–∫—Ç–æ—Ä: {maker}**
    **–°—Ç–∞—Ç—É—Å: {status}**
    **–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø—É—Å–∫: {amount_dp}**

    **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–ø—É—Å–∫–∞ —Å–æ–±—Ä–∞–ª: {information_creator}**
    **–ó–∞—Ä–ø–ª–∞—Ç—É –≤—ã–ø–ª–∞—Ç–∏–ª: {dp_paid_by}**
    """

    embed = disnake.Embed(
        title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø—É—Å–∫–µ `[#{publication.publication_number}]`",
        description=embed_description,
        color=0x2B2D31,
    )
    return embed


async def date_validator(date_string: str):
    date_pattern = re.compile(r"^\d{4}-\d{2}-\d{2}$")

    if date_pattern.match(date_string):
        return True
    else:
        return False
